# pyproject.toml (atualizado para PostgreSQL)
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fitness-assistant-mcp"
version = "1.0.0"
description = "Assistente inteligente de treino físico com MCP CLI e PostgreSQL"
authors = [
    {name = "Matheus Francisco", email = "matheusfrancisco1103@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

dependencies = [
    "mcp[cli]>=1.6.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "numpy>=1.24.0",
    "python-dateutil>=2.8.0",
    "python-dotenv>=1.0.0",
    "uvicorn[standard]>=0.24.0",
    # PostgreSQL dependencies
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.13.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    # Testing with database
    "pytest-postgresql>=5.0.0",
    "factory-boy>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/matheus1103/fitness-assistant-mcp"
Repository = "https://github.com/matheus1103/fitness-assistant-mcp"
Documentation = "https://fitness-assistant-mcp.readthedocs.io"
Issues = "https://github.com/matheus1103/fitness-assistant-mcp/issues"

[project.scripts]
fitness-assistant = "fitness_assistant.server:main"
fitness-migrate = "fitness_assistant.database.migrations:main"

# === CONFIGURAÇÃO HATCH ===
[tool.hatch.build.targets.wheel]
packages = ["src/fitness_assistant"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests", 
    "/docs",
    "/scripts",
    "/migrations",
    "README.md",
    "LICENSE",
    "pyproject.toml",
    "alembic.ini"
]

# === CONFIGURAÇÃO UV ===
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pytest-postgresql>=5.0.0",
    "factory-boy>=3.3.0",
]

# === CONFIGURAÇÃO RUFF ===
[tool.ruff]
target-version = "py39"
line-length = 100
src = ["src"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["fitness_assistant"]

# === CONFIGURAÇÃO MYPY ===
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "numpy.*",
    "asyncpg.*",
    "alembic.*",
]
ignore_missing_imports = true

# === CONFIGURAÇÃO PYTEST ===
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/fitness_assistant",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "database: marks tests that require database"
]
asyncio_mode = "auto"

# === CONFIGURAÇÃO COVERAGE ===
[tool.coverage.run]
source = ["src/fitness_assistant"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]
show_missing = true
skip_covered = false
precision = 2